"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SvmDstEscrowFactory = void 0;
const tslib_1 = require("tslib");
const anchor_1 = require("@coral-xyz/anchor");
const assert_1 = tslib_1.__importDefault(require("assert"));
const instruction_1 = require("./instruction");
const base_program_1 = require("./base-program");
const whitelist_1 = require("./whitelist");
const bigint_to_bn_1 = require("../../utils/numbers/bigint-to-bn");
const uint_as_be_bytes_1 = require("../../utils/numbers/uint-as-be-bytes");
const uint256_split_1 = require("../../utils/numbers/uint256-split");
const utils_1 = require("../../utils");
const domains_1 = require("../../domains");
const cross_chain_escrow_dst_1 = require("../../idl/cross-chain-escrow-dst");
const bytes_1 = require("../../utils/bytes");
const bn_array_to_big_int_1 = require("../../utils/numbers/bn-array-to-big-int");
class SvmDstEscrowFactory extends base_program_1.BaseProgram {
    constructor(programId) {
        super(programId);
    }
    static parseCreateEscrowInstruction(ix) {
        const decoded = SvmDstEscrowFactory.coder.instruction.decode(ix.data);
        (0, assert_1.default)(decoded, 'cannot decode create instruction');
        (0, assert_1.default)(decoded.name === 'create', 'not create instruction');
        const data = decoded.data;
        return {
            orderHash: (0, bytes_1.bufferToHex)(data.orderHash),
            hashlock: domains_1.HashLock.fromString((0, bytes_1.bufferToHex)(data.hashlock)),
            amount: BigInt(data.amount.toString()),
            safetyDeposit: BigInt(data.safetyDeposit.toString()),
            recipient: domains_1.EvmAddress.fromBuffer(data.recipient.toBuffer()),
            timelocks: domains_1.TimeLocks.fromBigInt((0, bn_array_to_big_int_1.bnArrayToBigInt)(data.timelocks)),
            srcCancellationTimestamp: data.srcCancellationTimestamp,
            assetIsNative: data.assetIsNative
        };
    }
    static parsePrivateWithdrawInstruction(ix) {
        const decoded = this.coder.instruction.decode(ix.data);
        (0, assert_1.default)(decoded, 'cannot decode withdraw instruction');
        (0, assert_1.default)(decoded.name === 'withdraw', 'not withdraw instruction');
        return {
            secret: (0, bytes_1.bufferToHex)(decoded.data.secret)
        };
    }
    static parsePublicWithdrawInstruction(ix) {
        const decoded = this.coder.instruction.decode(ix.data);
        (0, assert_1.default)(decoded, 'cannot decode publicWithdraw instruction');
        (0, assert_1.default)(decoded.name === 'publicWithdraw', 'not publicWithdraw instruction');
        return {
            secret: (0, bytes_1.bufferToHex)(decoded.data.secret)
        };
    }
    getEscrowAddress(params) {
        return (0, utils_1.getPda)(this.programId, [
            this.encoder.encode('escrow'),
            params.orderHash,
            params.hashLock.toBuffer(),
            params.maker.toBuffer(),
            (0, uint_as_be_bytes_1.uintAsBeBytes)(params.amount, 64)
        ]);
    }
    createEscrow(params, extra) {
        const token = params.token.isNative()
            ? domains_1.SolanaAddress.WRAPPED_NATIVE
            : params.token;
        const data = SvmDstEscrowFactory.coder.instruction.encode('create', {
            orderHash: params.orderHash,
            hashlock: params.hashLock.toBuffer(),
            amount: new anchor_1.BN(params.amount.toString()),
            safetyDeposit: new anchor_1.BN(params.safetyDeposit.toString()),
            recipient: params.maker,
            timelocks: (0, uint256_split_1.uint256split)(params.timeLocks.build()).map(bigint_to_bn_1.bigintToBN),
            srcCancellationTimestamp: Number(extra.srcCancellationTimestamp),
            assetIsNative: params.token.isNative()
        });
        const escrowAddress = this.getEscrowAddress(params);
        return new instruction_1.Instruction(this.programId, [
            {
                // 1. taker
                pubkey: params.taker,
                isSigner: true,
                isWritable: true
            },
            {
                // 2. mint
                pubkey: token,
                isWritable: false,
                isSigner: false
            },
            this.optionalAccount({
                // 3. taker_ata
                pubkey: (0, utils_1.getAta)(params.taker, token, extra.tokenProgramId),
                isSigner: false,
                isWritable: true
            }, params.token.isNative()),
            {
                // 4. escrow
                pubkey: escrowAddress,
                isSigner: false,
                isWritable: true
            },
            {
                // 5. escrow ata
                pubkey: (0, utils_1.getAta)(escrowAddress, token, extra.tokenProgramId),
                isWritable: true,
                isSigner: false
            },
            {
                // 6. associated_token_program
                pubkey: domains_1.SolanaAddress.ASSOCIATED_TOKE_PROGRAM_ID,
                isSigner: false,
                isWritable: false
            },
            {
                // 7. token_program
                pubkey: extra.tokenProgramId,
                isSigner: false,
                isWritable: false
            },
            {
                // 8. rent
                pubkey: domains_1.SolanaAddress.SYSVAR_RENT_ID,
                isSigner: false,
                isWritable: false
            },
            {
                // 9. system_program
                pubkey: domains_1.SolanaAddress.SYSTEM_PROGRAM_ID,
                isSigner: false,
                isWritable: false
            }
        ], data);
    }
    withdrawPrivate(params, secret, extra) {
        const token = params.token.isNative()
            ? domains_1.SolanaAddress.WRAPPED_NATIVE
            : params.token;
        const data = SvmDstEscrowFactory.coder.instruction.encode('withdraw', {
            secret
        });
        const escrow = this.getEscrowAddress(params);
        return new instruction_1.Instruction(this.programId, [
            {
                // 1. taker
                pubkey: params.taker,
                isSigner: true,
                isWritable: true
            },
            {
                // 2. recipient
                pubkey: params.maker,
                isSigner: false,
                isWritable: true
            },
            {
                // 3. dst token
                pubkey: token,
                isSigner: false,
                isWritable: false
            },
            {
                // 4. escrow
                pubkey: escrow,
                isSigner: false,
                isWritable: true
            },
            {
                // 5. escrow_ata
                pubkey: (0, utils_1.getAta)(escrow, token, extra.tokenProgramId),
                isSigner: false,
                isWritable: true
            },
            this.optionalAccount({
                // 6. recipient_ata
                pubkey: (0, utils_1.getAta)(params.maker, params.token, extra.tokenProgramId),
                isSigner: false,
                isWritable: true
            }, params.token.isNative()),
            {
                // 7. associated_token_program
                pubkey: domains_1.SolanaAddress.ASSOCIATED_TOKE_PROGRAM_ID,
                isSigner: false,
                isWritable: false
            },
            {
                // 8. token_program
                pubkey: extra.tokenProgramId,
                isSigner: false,
                isWritable: false
            },
            {
                // 9. system_program
                pubkey: domains_1.SolanaAddress.SYSTEM_PROGRAM_ID,
                isSigner: false,
                isWritable: false
            }
        ], data);
    }
    withdrawPublic(params, secret, payer, extra) {
        const whitelistProgram = extra.whitelistProgramId
            ? new whitelist_1.WhitelistContract(extra.whitelistProgramId)
            : whitelist_1.WhitelistContract.DEFAULT;
        const token = params.token.isNative()
            ? domains_1.SolanaAddress.WRAPPED_NATIVE
            : params.token;
        const data = SvmDstEscrowFactory.coder.instruction.encode('publicWithdraw', { secret });
        const escrow = this.getEscrowAddress(params);
        return new instruction_1.Instruction(this.programId, [
            {
                // 1. creator
                pubkey: params.taker,
                isSigner: false,
                isWritable: true
            },
            {
                // 2. recipient
                pubkey: params.maker,
                isSigner: false,
                isWritable: true
            },
            {
                // 3. payer
                pubkey: payer,
                isSigner: true,
                isWritable: true
            },
            {
                // 4. resolver_access
                pubkey: whitelistProgram.getAccessAccount(payer),
                isSigner: false,
                isWritable: false
            },
            {
                // 5. mint
                pubkey: token,
                isSigner: false,
                isWritable: false
            },
            {
                // 6. escrow
                pubkey: escrow,
                isSigner: false,
                isWritable: true
            },
            {
                // 7. escrow_ata
                pubkey: (0, utils_1.getAta)(escrow, token, extra.tokenProgramId),
                isSigner: false,
                isWritable: true
            },
            this.optionalAccount({
                // 8. recipient_ata
                pubkey: (0, utils_1.getAta)(params.maker, params.token, extra.tokenProgramId),
                isSigner: false,
                isWritable: true
            }, params.token.isNative()),
            {
                // 9. associated_token_program
                pubkey: domains_1.SolanaAddress.ASSOCIATED_TOKE_PROGRAM_ID,
                isSigner: false,
                isWritable: false
            },
            {
                // 10. token_program
                pubkey: extra.tokenProgramId,
                isSigner: false,
                isWritable: false
            },
            {
                // 11. system_program
                pubkey: domains_1.SolanaAddress.SYSTEM_PROGRAM_ID,
                isSigner: false,
                isWritable: false
            }
        ], data);
    }
}
exports.SvmDstEscrowFactory = SvmDstEscrowFactory;
SvmDstEscrowFactory.DEFAULT = new SvmDstEscrowFactory(new domains_1.SolanaAddress('GveV3ToLhvRmeq1Fyg3BMkNetZuG9pZEp4uBGWLrTjve'));
SvmDstEscrowFactory.coder = new anchor_1.BorshCoder(cross_chain_escrow_dst_1.IDL);
//# sourceMappingURL=svm-dst-escrow-factory.js.map