import { CrossChainOrderParamsData, Presets } from './types';
import { EvmAddress } from '../../../domains/addresses';
import { Cost, PresetEnum, QuoterResponse, TimeLocksRaw } from '../types';
import { Preset } from '../preset';
import { QuoterRequest } from '../quoter.request';
import { EvmCrossChainOrder } from '../../../cross-chain-order/evm';
import { EvmChain, SolanaChain, SupportedChain } from '../../../chains';
import { AddressForChain } from '../../../type-utils';
type Whitelist<SrcChain extends SupportedChain> = SrcChain extends EvmChain ? EvmAddress[] : [];
export declare class Quote<SrcChain extends SupportedChain = SupportedChain, DstChain extends SupportedChain = SupportedChain> {
    readonly params: QuoterRequest<SrcChain, DstChain>;
    readonly quoteId: string | null;
    readonly srcTokenAmount: bigint;
    readonly dstTokenAmount: bigint;
    readonly presets: Presets;
    readonly srcEscrowFactory: AddressForChain<SrcChain>;
    readonly dstEscrowFactory: AddressForChain<DstChain>;
    readonly timeLocks: TimeLocksRaw;
    readonly srcSafetyDeposit: bigint;
    readonly dstSafetyDeposit: bigint;
    readonly whitelist: Whitelist<SrcChain>;
    readonly recommendedPreset: PresetEnum;
    readonly prices: Cost;
    readonly volume: Cost;
    readonly slippage: number;
    private constructor();
    get srcChainId(): SrcChain;
    get dstChainId(): DstChain;
    static fromEVMQuote(request: QuoterRequest<EvmChain>, response: QuoterResponse): Quote<EvmChain>;
    static fromSolanaQuote(request: QuoterRequest<SolanaChain>, response: QuoterResponse): Quote<SolanaChain>;
    createEvmOrder(params: CrossChainOrderParamsData): EvmCrossChainOrder;
    isEvmQuote(): this is Quote<EvmChain>;
    isSolanaQuote(): this is Quote<SolanaChain>;
    getPreset(type?: PresetEnum): Preset;
    private getWhitelist;
}
export {};
