import { add0x, UINT_160_MAX } from '@1inch/byte-utils';
import { hexlify } from 'ethers';
import assert from 'assert';
/**
 * Contains highest bits of address (>UINT_160_MAX) if address is bigger than UINT_160_MAX
 *
 * @see SolanaAddress.splitToParts
 */
export class AddressComplement {
    constructor(inner) {
        this.inner = inner;
        assert(inner <= UINT_160_MAX);
    }
    asHex() {
        return hexlify(add0x(this.inner.toString(16)));
    }
    isZero() {
        return this.inner == 0n;
    }
}
AddressComplement.ZERO = new AddressComplement(0n);
//# sourceMappingURL=address-complement.js.map